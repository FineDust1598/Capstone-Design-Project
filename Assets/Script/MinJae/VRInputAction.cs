//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Script/MinJae/VRInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VRInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VRInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VRInputAction"",
    ""maps"": [
        {
            ""name"": ""XRI RIghtHand"",
            ""id"": ""c265b0a6-f581-4598-a9ec-7500217b0068"",
            ""actions"": [
                {
                    ""name"": ""AButton"",
                    ""type"": ""Button"",
                    ""id"": ""79a39f68-68a5-4c77-99c7-f005a5c3bde5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b5018de1-0ce2-4630-8a37-a0e0b91edc25"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // XRI RIghtHand
        m_XRIRIghtHand = asset.FindActionMap("XRI RIghtHand", throwIfNotFound: true);
        m_XRIRIghtHand_AButton = m_XRIRIghtHand.FindAction("AButton", throwIfNotFound: true);
    }

    ~@VRInputAction()
    {
        UnityEngine.Debug.Assert(!m_XRIRIghtHand.enabled, "This will cause a leak and performance issues, VRInputAction.XRIRIghtHand.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // XRI RIghtHand
    private readonly InputActionMap m_XRIRIghtHand;
    private List<IXRIRIghtHandActions> m_XRIRIghtHandActionsCallbackInterfaces = new List<IXRIRIghtHandActions>();
    private readonly InputAction m_XRIRIghtHand_AButton;
    public struct XRIRIghtHandActions
    {
        private @VRInputAction m_Wrapper;
        public XRIRIghtHandActions(@VRInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @AButton => m_Wrapper.m_XRIRIghtHand_AButton;
        public InputActionMap Get() { return m_Wrapper.m_XRIRIghtHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRIRIghtHandActions set) { return set.Get(); }
        public void AddCallbacks(IXRIRIghtHandActions instance)
        {
            if (instance == null || m_Wrapper.m_XRIRIghtHandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRIRIghtHandActionsCallbackInterfaces.Add(instance);
            @AButton.started += instance.OnAButton;
            @AButton.performed += instance.OnAButton;
            @AButton.canceled += instance.OnAButton;
        }

        private void UnregisterCallbacks(IXRIRIghtHandActions instance)
        {
            @AButton.started -= instance.OnAButton;
            @AButton.performed -= instance.OnAButton;
            @AButton.canceled -= instance.OnAButton;
        }

        public void RemoveCallbacks(IXRIRIghtHandActions instance)
        {
            if (m_Wrapper.m_XRIRIghtHandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IXRIRIghtHandActions instance)
        {
            foreach (var item in m_Wrapper.m_XRIRIghtHandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRIRIghtHandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public XRIRIghtHandActions @XRIRIghtHand => new XRIRIghtHandActions(this);
    public interface IXRIRIghtHandActions
    {
        void OnAButton(InputAction.CallbackContext context);
    }
}
